<div class="container mt-5">
  <h1>All Events</h1>
  <div class="row">
    <!-- search by menù: selection for the field and input field -->
    <div class="col-md-8 mb-3">
      <div class="row">
        <div class="col-md-3 mb-3">
          <label for="search_by" class="form-label">Search By:</label>
        </div>
        <div class="col-md-9 mb-3">
          <%= select_tag :search_by,
                   options_for_select({
                    'Event Name' => 'name',
                    'Organizer' => 'organizer',
                    'City' => 'city',
                    'Cap' => 'cap',
                    'Province' => 'province',
                    'Country' => 'country',
                    'Beginning Date' => 'beginning_date',
                    'Ending Date' => 'ending_date',
                    'Date Interval' => 'interval',

                   }),
                   onchange: 'updateEventsList()',
                   class: 'form-select',
                   id: 'search_by' %>
        </div>
      </div>
      <!-- Normal Search Menù -->
      <div class="row", id="single-search-field">
        <div class="col-md-3 mb-3">
          <label for="search" class="form-label">Search:</label>
        </div>
        <div class="col-md-9 mb-3">
          <%= text_field_tag :search, nil, class: 'form-control', id: 'search', oninput: 'updateEventsList()' %>
        </div>
      </div>
      <!-- Date Interval Fields (Initially Hidden) -->
      <div class="row d-none" id="interval-search-fields">
        <div class="col-md-6 mb-3">
          <%= label_tag :from_date, 'From:', class: 'form-label' %>
          <%= date_field_tag :from_date, nil, class: 'form-control', id: 'from_date', oninput: 'updateEventsList()' %>
        </div>
        <div class="col-md-6 mb-3">
          <%= label_tag :to_date, 'To:', class: 'form-label' %>
          <%= date_field_tag :to_date, nil, class: 'form-control', id: 'to_date', oninput: 'updateEventsList()' %>
        </div>
      </div>
    </div>
    <!-- Select menù to decide the order of the events -->
    <div class="col-md-4 mb-3">
      <div class="row mb-3">
        <p>Order By:</p>
      </div>
      <div class="row mb-3">
        <%= select_tag :order_by,
                   options_for_select({
                    'Beginning Date (ASC)' => 'beginning_date-asc',
                    'Beginning Date (DESC)' => 'beginning_date-desc',
                    'Beginning Time (ASC)' => 'beginning_time-asc',
                    'Beginning Time (DESC)' => 'beginning_time-desc',
                    'Ending Date (ASC)' => 'ending_date-asc',
                    'Ending Date (DESC)' => 'ending_date-desc',
                    'Ending Time (ASC)' => 'ending_time-asc',
                    'Ending Time (DESC)' => 'ending_time-desc',
                    'Name (ASC)' => 'name-asc',
                    'Name (DESC)' => 'name-desc',
                    'Number of Participants (ASC)' => 'participants-asc',
                    'Number of Participants (DESC)' => 'participants-desc',
                    'City (ASC)' => 'city-asc',
                    'City (DESC)' => 'city-desc',
                    'Organizer (ASC)' => 'organizer-asc',
                    'Organizer (DESC)' => 'organizer-desc'
                   }),
                   onchange: 'updateEventsList()',
                   class: 'form-select',
                   id: 'order_by' %>
      </div>
    </div>
  </div>
  <!-- show a check for 'ongoing events' -->
  <div class="row justify-content-center">
  <div class="d-flex justify-content-center mt-3 mb-3"> <!-- Ensure the container is flex and centers its children -->
    <div class="form-check">
      <input class="form-check-input" type="checkbox" value="" id="ongoing-events" onchange="updateEventsList()">
      <label class="form-check-label" for="ongoing-events">
        Show only ongoing events
      </label>
    </div>
  </div>
</div>


  <!-- Error alert  -->
  <div class="row">
    <div id="error-message" class="alert alert-danger d-none" role="alert">
      An error occurred. Please try again.
    </div>
  </div>

  <!-- Event container -->
  <div class="row" id ="events-list">
    <%= render 'events_list', events: @events %>
  </div>

  <!-- Pagination -->
  <div class="d-flex justify-content-end" id="pagination">
 <%= paginate @events%>
</div>


</div>
<script>
  function updateEventsList() {
    var orderByValue = document.getElementById('order_by').value.split('-');
    var orderBy = orderByValue[0]; // The attribute to sort by
    var direction = orderByValue[1]; // The direction of sort
    var searchBy = document.getElementById('search_by').value;
    var search = document.getElementById('search').value;
    var useInterval = searchBy === 'interval';
    console.log("request:");
    console.log(orderBy, searchBy, search);
    
    var showOngoing = document.getElementById('ongoing-events').checked;

    var path = `/events?on_going=${showOngoing}&order_by=${orderBy}&direction=${direction}`;

    if (useInterval) {
      var fromDate = document.getElementById('from_date').value;
      var toDate = document.getElementById('to_date').value;
      // strip spaces
      fromDate = fromDate.replace(/\s/g, '');
      toDate = toDate.replace(/\s/g, '');
      if (fromDate || toDate) {
        path += `&search_by=${searchBy}&from_date=${fromDate}&to_date=${toDate}`;
      }
    } else {
      var search = document.getElementById('search').value;
      search = search.replace(/\s/g, '');
      if (search) {
        path += `&search_by=${searchBy}&search=${search}`;
      }
    }


    fetch(path, {
      headers: {
        'Accept': 'application/javascript',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => {
      if (!response.ok) { // Check if the response status code is not OK (200-299)
        throw new Error('Network response was not ok'); // This will be caught by the catch block
      }
      return response.text(); // Continue processing the response if it's OK
    })
    .then(html => {
       document.getElementById('error-message').classList.add('d-none');
      document.getElementById('events-list').innerHTML = html;

    })
    .catch(error => {
      console.error('Error:', error);
      document.getElementById('error-message').classList.remove('d-none');
    });

  }


  document.addEventListener('DOMContentLoaded', function() {
      const queryParams = new URLSearchParams(window.location.search);
     

  document.getElementById('search_by').addEventListener('change', function() {
  var searchBy = this.value;
  var isInterval = searchBy === 'interval';
  document.getElementById('single-search-field').classList.toggle('d-none', isInterval);
  document.getElementById('interval-search-fields').classList.toggle('d-none', !isInterval);
  });
  });
</script>